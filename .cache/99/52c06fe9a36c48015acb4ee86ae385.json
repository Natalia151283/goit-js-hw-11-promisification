{"id":"QxBV","dependencies":[{"name":"/Users/natalia/Documents/js/goit-js-hw-11-promisification/package.json","includedInParent":true,"mtime":1625493444758}],"generated":{"js":"var n=function(n){return new Promise(function(n,e){})},e=function(n){return console.log(\"Resolved after \".concat(n,\"ms\"))};n(2e3).then(e),n(1e3).then(e),n(1500).then(e);"},"sourceMaps":{"js":{"mappings":[{"source":"index_1.js","original":{"line":6,"column":0},"generated":{"line":1,"column":0}},{"source":"index_1.js","name":"delay","original":{"line":6,"column":6},"generated":{"line":1,"column":4}},{"source":"index_1.js","original":{"line":6,"column":14},"generated":{"line":1,"column":6}},{"source":"index_1.js","name":"ms","original":{"line":6,"column":14},"generated":{"line":1,"column":15}},{"source":"index_1.js","original":{"line":8,"column":9},"generated":{"line":1,"column":18}},{"source":"index_1.js","original":{"line":8,"column":9},"generated":{"line":1,"column":25}},{"source":"index_1.js","name":"Promise","original":{"line":8,"column":13},"generated":{"line":1,"column":29}},{"source":"index_1.js","original":{"line":8,"column":21},"generated":{"line":1,"column":37}},{"source":"index_1.js","name":"resolve","original":{"line":8,"column":22},"generated":{"line":1,"column":46}},{"source":"index_1.js","name":"reject","original":{"line":8,"column":31},"generated":{"line":1,"column":48}},{"source":"index_1.js","name":"logger","original":{"line":14,"column":6},"generated":{"line":1,"column":55}},{"source":"index_1.js","original":{"line":14,"column":15},"generated":{"line":1,"column":57}},{"source":"index_1.js","name":"time","original":{"line":14,"column":15},"generated":{"line":1,"column":66}},{"source":"index_1.js","name":"console","original":{"line":14,"column":23},"generated":{"line":1,"column":69}},{"source":"index_1.js","name":"console","original":{"line":14,"column":23},"generated":{"line":1,"column":76}},{"source":"index_1.js","name":"log","original":{"line":14,"column":31},"generated":{"line":1,"column":84}},{"source":"index_1.js","name":"time","original":{"line":14,"column":53},"generated":{"line":1,"column":88}},{"source":"index_1.js","name":"time","original":{"line":14,"column":53},"generated":{"line":1,"column":106}},{"source":"index_1.js","name":"time","original":{"line":14,"column":53},"generated":{"line":1,"column":113}},{"source":"index_1.js","original":{"line":14,"column":19},"generated":{"line":1,"column":115}},{"source":"index_1.js","name":"delay","original":{"line":17,"column":0},"generated":{"line":1,"column":123}},{"source":"index_1.js","original":{"line":17,"column":6},"generated":{"line":1,"column":125}},{"source":"index_1.js","name":"then","original":{"line":17,"column":12},"generated":{"line":1,"column":130}},{"source":"index_1.js","name":"logger","original":{"line":17,"column":17},"generated":{"line":1,"column":135}},{"source":"index_1.js","name":"delay","original":{"line":18,"column":0},"generated":{"line":1,"column":138}},{"source":"index_1.js","original":{"line":18,"column":6},"generated":{"line":1,"column":140}},{"source":"index_1.js","name":"then","original":{"line":18,"column":12},"generated":{"line":1,"column":145}},{"source":"index_1.js","name":"logger","original":{"line":18,"column":17},"generated":{"line":1,"column":150}},{"source":"index_1.js","name":"delay","original":{"line":19,"column":0},"generated":{"line":1,"column":153}},{"source":"index_1.js","original":{"line":19,"column":6},"generated":{"line":1,"column":155}},{"source":"index_1.js","name":"then","original":{"line":19,"column":12},"generated":{"line":1,"column":161}},{"source":"index_1.js","name":"logger","original":{"line":19,"column":17},"generated":{"line":1,"column":166}}],"sources":{"index_1.js":"//Напиши функцию delay(ms), которая возвращает промис, \n//переходящий в состояние \"resolved\" через ms миллисекунд. \n//Значением исполнившегося промиса должно быть то кол-во миллисекунд \n//которое передали во время вызова функции delay.\n\nconst delay = ms => {\n\n  return new Promise((resolve, reject) =>\n  {\n\n  });\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms"},"lineCount":null}},"error":null,"hash":"53ca126ba0facf8e86ef5d117c9d67a3","cacheData":{"env":{}}}